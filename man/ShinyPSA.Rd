% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ShinyPSA_R6.R
\name{ShinyPSA}
\alias{ShinyPSA}
\title{R6 Class representing a PSA summarising machine.}
\format{
An \link[R6:R6Class]{R6::R6Class} object.
}
\description{
An instance of this class is expected to produce summary plots and
tables.
}
\examples{
\dontrun{
library(ShinyPSA)

PSA_summary <- ShinyPSA$new(
  .effs = ShinyPSA::Smoking_PSA$e,
  .costs = ShinyPSA::Smoking_PSA$c,
  .interventions = ShinyPSA::Smoking_PSA$treats
  )
}


## ------------------------------------------------
## Method `ShinyPSA$new`
## ------------------------------------------------

\dontrun{
# Instantiate a copy of class ShinyPSA:
PSA_outputs <- ShinyPSA$new(
                  .effs = as_tibble(ShinyPSA::Vaccine_PSA$e),
                  .costs = as_tibble(ShinyPSA::Vaccine_PSA$c),
                  .interventions = ShinyPSA::Vaccine_PSA$treats)
}

## ------------------------------------------------
## Method `ShinyPSA$get_Summary_table`
## ------------------------------------------------

\dontrun{
# Instantiate a copy of class ShinyPSA:
PSA_outputs <- ShinyPSA$new(
                  .effs = as_tibble(ShinyPSA::Vaccine_PSA$e),
                  .costs = as_tibble(ShinyPSA::Vaccine_PSA$c),
                  .interventions = ShinyPSA::Vaccine_PSA$treats)

PSA_outputs$get_Summary_table()
}

## ------------------------------------------------
## Method `ShinyPSA$get_CEP`
## ------------------------------------------------

\dontrun{
# Instantiate a copy of class ShinyPSA:
PSA_outputs <- ShinyPSA$new(
                  .effs = as_tibble(ShinyPSA::Vaccine_PSA$e),
                  .costs = as_tibble(ShinyPSA::Vaccine_PSA$c),
                  .interventions = ShinyPSA::Vaccine_PSA$treats)
# Get default plot:
PSA_outputs$get_CEP()

PSA_outputs$get_CEP(
  .ref = 1,
  .show_ICER = T,
  .legend_pos = c(0.8, 0.2),
  .show_wtp = T,
  .zoom = T,
  .wtp_threshold = c(20000, 500, 100, 50),
  .nudge_labels = c(0.1, -0.1),
  .zoom_cords = c(-0.001, 0.001, -5, 5)
  )
}

## ------------------------------------------------
## Method `ShinyPSA$get_CEAC`
## ------------------------------------------------

\dontrun{
# Instantiate a copy of class ShinyPSA:
PSA_outputs <- ShinyPSA$new(
                  .effs = as_tibble(ShinyPSA::Smoking_PSA$e),
                  .costs = as_tibble(ShinyPSA::Smoking_PSA$c),
                  .interventions = ShinyPSA::Smoking_PSA$treats)

PSA_outputs$get_CEAC()
}

## ------------------------------------------------
## Method `ShinyPSA$get_CEAF`
## ------------------------------------------------

\dontrun{
# Instantiate a copy of class ShinyPSA:
PSA_outputs <- ShinyPSA$new(
                  .effs = as_tibble(ShinyPSA::Smoking_PSA$e),
                  .costs = as_tibble(ShinyPSA::Smoking_PSA$c),
                  .interventions = ShinyPSA::Smoking_PSA$treats)

PSA_outputs$get_CEAF()
}

## ------------------------------------------------
## Method `ShinyPSA$get_eNMB`
## ------------------------------------------------

\dontrun{
# Instantiate a copy of class ShinyPSA:
PSA_outputs <- ShinyPSA$new(
                  .effs = as_tibble(ShinyPSA::Smoking_PSA$e),
                  .costs = as_tibble(ShinyPSA::Smoking_PSA$c),
                  .interventions = ShinyPSA::Smoking_PSA$treats)

PSA_outputs$get_eNMB()
}

## ------------------------------------------------
## Method `ShinyPSA$get_EVPI`
## ------------------------------------------------

\dontrun{
# Instantiate a copy of class ShinyPSA:
PSA_outputs <- ShinyPSA$new(
                  .effs = as_tibble(ShinyPSA::Smoking_PSA$e),
                  .costs = as_tibble(ShinyPSA::Smoking_PSA$c),
                  .interventions = ShinyPSA::Smoking_PSA$treats)

PSA_outputs$get_EVPI()
}

## ------------------------------------------------
## Method `ShinyPSA$get_PSA_stabl_plots`
## ------------------------------------------------

\dontrun{
# Instantiate a copy of class ShinyPSA:
PSA_outputs <- ShinyPSA$new(
                  .effs = as_tibble(ShinyPSA::Smoking_PSA$e),
                  .costs = as_tibble(ShinyPSA::Smoking_PSA$c),
                  .interventions = ShinyPSA::Smoking_PSA$treats)

PSA_outputs$get_PSA_stabl_plots()
}

## ------------------------------------------------
## Method `ShinyPSA$get_WTP`
## ------------------------------------------------

\dontrun{
# Instantiate a copy of class ShinyPSA:
PSA_outputs <- ShinyPSA$new(
                  .effs = as_tibble(ShinyPSA::Smoking_PSA$e),
                  .costs = as_tibble(ShinyPSA::Smoking_PSA$c),
                  .interventions = ShinyPSA::Smoking_PSA$treats)

PSA_outputs$get_WTP()
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{Summary_table}}{a summary table with differentials, ICER(s), net benefits and probability being cost-effective.}

\item{\code{CEP_plot}}{the Cost-Effectiveness plane.}

\item{\code{CEAC_plot}}{the Cost-Effectiveness Acceptability Curve.}

\item{\code{CEAF_plot}}{the Cost-Effectiveness Acceptability Frontier.}

\item{\code{EVPI_plot}}{the Expected Value of Perfect Information.}

\item{\code{eNMB_plot}}{the expected Net Monitory Benefit.}

\item{\code{stability_plots}}{PSA outputs' values' stability plots.}

\item{\code{app}}{a list to store shiny app elements}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ShinyPSA-new}{\code{ShinyPSA$new()}}
\item \href{#method-ShinyPSA-get_Summary_table}{\code{ShinyPSA$get_Summary_table()}}
\item \href{#method-ShinyPSA-get_CEP}{\code{ShinyPSA$get_CEP()}}
\item \href{#method-ShinyPSA-get_CEAC}{\code{ShinyPSA$get_CEAC()}}
\item \href{#method-ShinyPSA-get_CEAF}{\code{ShinyPSA$get_CEAF()}}
\item \href{#method-ShinyPSA-get_eNMB}{\code{ShinyPSA$get_eNMB()}}
\item \href{#method-ShinyPSA-get_EVPI}{\code{ShinyPSA$get_EVPI()}}
\item \href{#method-ShinyPSA-get_PSA_stabl_plots}{\code{ShinyPSA$get_PSA_stabl_plots()}}
\item \href{#method-ShinyPSA-get_WTP}{\code{ShinyPSA$get_WTP()}}
\item \href{#method-ShinyPSA-clone}{\code{ShinyPSA$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ShinyPSA-new"></a>}}
\if{latex}{\out{\hypertarget{method-ShinyPSA-new}{}}}
\subsection{Method \code{new()}}{
Initialisation method (triggered when a new object is created).
Summary plots and table(s) are created alongside the construction
of the plot.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyPSA$new(
  .effs,
  .costs,
  .interventions = NULL,
  .ref = NULL,
  .Kmax = 1e+05,
  .wtp = NULL,
  .plot = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{.effs}}{A matrix containing the \code{effects} from PSA.
Number of \code{columns} is equal to the interventions while the
number of \code{rows} is equal to the number of PSA simulations to
be summarised.}

\item{\code{.costs}}{A matrix containing the \code{costs} from PSA.
Number of \code{columns} is equal to the interventions while the
number of \code{rows} is equal to the number of PSA simulations to
be summarised.}

\item{\code{.interventions}}{A vector containing the names of all
interventions. If not provided or less names than needed is
provided, the function will generate generic names, for example
\code{intervention 1}.}

\item{\code{.ref}}{An integer indicating the index of the reference
intervention. This parameter is ignored if more than two
\code{interventions} are under analysis.}

\item{\code{.Kmax}}{The maximum willingness-to-pay threshold to use in the
analysis. This parameter is ignored if \code{wtp} is provided.}

\item{\code{.wtp}}{A vector of numerical values declaring the
willingness-to-pay (WTP) values to use in the analysis. If
\code{NULL} (default) a range of WTP values (up to \code{.Kmax}
will be used.}

\item{\code{.plot}}{A boolean, FALSE (default), for whether to generate
plots.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \code{ShinyPSA} object.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
# Instantiate a copy of class ShinyPSA:
PSA_outputs <- ShinyPSA$new(
                  .effs = as_tibble(ShinyPSA::Vaccine_PSA$e),
                  .costs = as_tibble(ShinyPSA::Vaccine_PSA$c),
                  .interventions = ShinyPSA::Vaccine_PSA$treats)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ShinyPSA-get_Summary_table"></a>}}
\if{latex}{\out{\hypertarget{method-ShinyPSA-get_Summary_table}{}}}
\subsection{Method \code{get_Summary_table()}}{
Get the results summary table
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyPSA$get_Summary_table(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{arguments passed to the drawing function. These include:
.wtp_ A numeric vector containing the willingness-to-pay
value(s) to be considered in the summary table. Default values are
\code{c(20,000, 30,000)}
.units_ A character, the units to associate with the
monitory values in the summary table. Default is sterling pounds
(GBP) \code{"\u00A3"}.
.effects_label_ The label or name to be given to the effects
column in the summary table. Default is QALYs.
.beautify_ Return a visually improved version of the table. The
returned version is built using DT::datatable()
.long_ Logical (default \code{TRUE}) for whether a long version
of the table is to be returned. If \code{FALSE}, a wide version of the
table will be returned}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A table of class DT
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
# Instantiate a copy of class ShinyPSA:
PSA_outputs <- ShinyPSA$new(
                  .effs = as_tibble(ShinyPSA::Vaccine_PSA$e),
                  .costs = as_tibble(ShinyPSA::Vaccine_PSA$c),
                  .interventions = ShinyPSA::Vaccine_PSA$treats)

PSA_outputs$get_Summary_table()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ShinyPSA-get_CEP"></a>}}
\if{latex}{\out{\hypertarget{method-ShinyPSA-get_CEP}{}}}
\subsection{Method \code{get_CEP()}}{
Get the Cost-Effectiveness plane
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyPSA$get_CEP(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Extra arguments passed to the plotting functions}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A ggplot2 object
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
# Instantiate a copy of class ShinyPSA:
PSA_outputs <- ShinyPSA$new(
                  .effs = as_tibble(ShinyPSA::Vaccine_PSA$e),
                  .costs = as_tibble(ShinyPSA::Vaccine_PSA$c),
                  .interventions = ShinyPSA::Vaccine_PSA$treats)
# Get default plot:
PSA_outputs$get_CEP()

PSA_outputs$get_CEP(
  .ref = 1,
  .show_ICER = T,
  .legend_pos = c(0.8, 0.2),
  .show_wtp = T,
  .zoom = T,
  .wtp_threshold = c(20000, 500, 100, 50),
  .nudge_labels = c(0.1, -0.1),
  .zoom_cords = c(-0.001, 0.001, -5, 5)
  )
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ShinyPSA-get_CEAC"></a>}}
\if{latex}{\out{\hypertarget{method-ShinyPSA-get_CEAC}{}}}
\subsection{Method \code{get_CEAC()}}{
Get the Cost-Effectiveness Acceptability Curve
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyPSA$get_CEAC(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Extra arguments passed to the plotting functions}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A ggplot2 object
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
# Instantiate a copy of class ShinyPSA:
PSA_outputs <- ShinyPSA$new(
                  .effs = as_tibble(ShinyPSA::Smoking_PSA$e),
                  .costs = as_tibble(ShinyPSA::Smoking_PSA$c),
                  .interventions = ShinyPSA::Smoking_PSA$treats)

PSA_outputs$get_CEAC()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ShinyPSA-get_CEAF"></a>}}
\if{latex}{\out{\hypertarget{method-ShinyPSA-get_CEAF}{}}}
\subsection{Method \code{get_CEAF()}}{
Get the Cost-Effectiveness Acceptability Frontier
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyPSA$get_CEAF(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Extra arguments passed to the plotting functions}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A ggplot2 object
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
# Instantiate a copy of class ShinyPSA:
PSA_outputs <- ShinyPSA$new(
                  .effs = as_tibble(ShinyPSA::Smoking_PSA$e),
                  .costs = as_tibble(ShinyPSA::Smoking_PSA$c),
                  .interventions = ShinyPSA::Smoking_PSA$treats)

PSA_outputs$get_CEAF()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ShinyPSA-get_eNMB"></a>}}
\if{latex}{\out{\hypertarget{method-ShinyPSA-get_eNMB}{}}}
\subsection{Method \code{get_eNMB()}}{
Get the expected Net Monitory Benefit
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyPSA$get_eNMB(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Extra arguments passed to the plotting functions}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A ggplot2 object
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
# Instantiate a copy of class ShinyPSA:
PSA_outputs <- ShinyPSA$new(
                  .effs = as_tibble(ShinyPSA::Smoking_PSA$e),
                  .costs = as_tibble(ShinyPSA::Smoking_PSA$c),
                  .interventions = ShinyPSA::Smoking_PSA$treats)

PSA_outputs$get_eNMB()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ShinyPSA-get_EVPI"></a>}}
\if{latex}{\out{\hypertarget{method-ShinyPSA-get_EVPI}{}}}
\subsection{Method \code{get_EVPI()}}{
Get the Expected Value of Perfect Information
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyPSA$get_EVPI(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Extra arguments passed to the plotting functions}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A ggplot2 object
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
# Instantiate a copy of class ShinyPSA:
PSA_outputs <- ShinyPSA$new(
                  .effs = as_tibble(ShinyPSA::Smoking_PSA$e),
                  .costs = as_tibble(ShinyPSA::Smoking_PSA$c),
                  .interventions = ShinyPSA::Smoking_PSA$treats)

PSA_outputs$get_EVPI()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ShinyPSA-get_PSA_stabl_plots"></a>}}
\if{latex}{\out{\hypertarget{method-ShinyPSA-get_PSA_stabl_plots}{}}}
\subsection{Method \code{get_PSA_stabl_plots()}}{
Get the PSA outputs stability plots
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyPSA$get_PSA_stabl_plots(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Extra arguments passed to the plotting functions}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A ggplot2 object
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
# Instantiate a copy of class ShinyPSA:
PSA_outputs <- ShinyPSA$new(
                  .effs = as_tibble(ShinyPSA::Smoking_PSA$e),
                  .costs = as_tibble(ShinyPSA::Smoking_PSA$c),
                  .interventions = ShinyPSA::Smoking_PSA$treats)

PSA_outputs$get_PSA_stabl_plots()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ShinyPSA-get_WTP"></a>}}
\if{latex}{\out{\hypertarget{method-ShinyPSA-get_WTP}{}}}
\subsection{Method \code{get_WTP()}}{
Get the willingness-to-pay values used in the analysis
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyPSA$get_WTP()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
An integer
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
# Instantiate a copy of class ShinyPSA:
PSA_outputs <- ShinyPSA$new(
                  .effs = as_tibble(ShinyPSA::Smoking_PSA$e),
                  .costs = as_tibble(ShinyPSA::Smoking_PSA$c),
                  .interventions = ShinyPSA::Smoking_PSA$treats)

PSA_outputs$get_WTP()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ShinyPSA-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ShinyPSA-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyPSA$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
